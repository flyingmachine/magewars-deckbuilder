(page "index.html"
  (:require [magewars-deckbuilder.deck :as d]))

(set! cljs.core/*print-fn* #(.log js/console %))

(defn empty-filters
  [attrs]
  (into {} (map #(vector (first %) #{}) attrs)))
(defn add-filter
  [cf attr val]
  (merge-with into cf {attr #{val}}))
(defn remove-filter
  [cf attr val]
  (merge cf {attr (disj (get cf attr) val)}))

(defn toggle-filter!
  [filters attr val]
  (fn []
    (let [f (if (get-in @filters [attr val]) remove-filter add-filter)]
      (swap! filters f attr val))))

(defn map-set-filter
  [filters x]
  (every?
   (fn [[attr vs]]
     (or (empty? vs) (vs (attr x))))
   filters))
(defn filter-cards
  [cards filters]
  (if (empty? filters)
    cards
    (filter (partial map-set-filter filters) cards)))

(defn filter-count
  [cards attr val]
  (cell= (count (filter #(= (get % attr) val) cards))))

(defn filter-val
  [cards filters attr val]
  (li
   (label
    (input :type "checkbox"
           :on-change (toggle-filter! filters attr val))
    (text "~{val} ~{@(filter-count cards attr val)}"))))
(defn filter-attribute
  [cards filters [attr vals]]
  (div (h3 (text "~{attr}"))
       (ul (map (partial filter-val cards filters attr) vals))))

(defn move-card
  [card src dest]
  (fn []
    (let [c @card]
      (swap! src disj c)
      (swap! dest conj c))))

(defn filterable-card-set
  [cards filterable dest]
  (let [filtersc (cell (empty-filters filterable))
        cardsc (cell= (sort-by :title (filter-cards cards filtersc)))]
    (div
     (div :class "filters"
      (map (partial filter-attribute cardsc filtersc) (sort-by first filterable)))
     (loop-tpl :size 20 :bindings [card cardsc]
      (div :on-click (move-card card cards dest)
       (text "~{card}"))))))

(html
 (head)
 (body
  (h1 "Mage Wars Deck Builder")
  (div :id "deck"
   (h3 "Your Deck")
   (filterable-card-set d/deck d/attributes d/base-set))
  (div :id "base-set"
   (h3 "Base Set")
   (filterable-card-set d/base-set d/attributes d/deck))))
