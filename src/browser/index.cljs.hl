(page "index.html"
  (:require [magewars-deckbuilder.deck :as d]))

(set! cljs.core/*print-fn* #(.log js/console %))

(defn empty-filters
  [attrs]
  (into {} (map (fn [[a]] [a #{}]) attrs)))
(defn toggle-filter!
  [filters attr val]
  (fn []
    (let [f (if (get-in @filters [attr val]) disj conj)]
      (swap! filters #(merge-with f % {attr val})))))

(defn only-non-empty
  [filters]
  (filter #(not (empty? (second %))) filters))

(defn map-set-filter
  [filters x]
  (every? #((second %) ((first %) x)) filters))
(defn filter-cards
  [cards filters]
  (filter (partial map-set-filter (only-non-empty filters)) cards))

(defn filter-count
  [all-cards cards filters attr val]
  (cell= (count
          (if (get-in filters [attr val])
            (filter #(= (attr %) val) cards)
            (filter
             #(and (= (attr %) val)
                   ((partial map-set-filter (only-non-empty (dissoc filters attr))) %))
             all-cards)))))

(defn filter-val
  [all-cards cards filters attr val]
  (li
   (label
    (input :type "checkbox"
           :on-change (toggle-filter! filters attr val))
    (text "~{val} ~{@(filter-count all-cards cards filters attr val)}"))))
(defn filter-attribute
  [all-cards cards filters [attr vals]]
  (div (h3 (text "~{attr}"))
       (ul (map (partial filter-val all-cards cards filters attr) vals))))

(defn add-card
  [dest c]
  (let [count {:count 1}]
    (if-let [found (some #(and (= (:title %) (:title c)) %) dest)]
      (conj (disj dest found) (merge-with + found count))
      (conj dest (merge c count)))))
(defn remove-card
  [src c]
  (into (disj src c)
        (if (> (:count c) 1)
          [(merge-with - c {:count 1})])))

(defn move-card
  [card src dest]
  (fn []
    (let [c @card]
      (swap! src remove-card c)
      (swap! dest add-card c))))

(defn filterable-card-set
  [cards filterable dest]
  (let [filtersc (cell (empty-filters filterable))
        cardsc (cell= (sort-by :title (filter-cards cards filtersc)))]
    (div
     (div :class "filters"
      (map (partial filter-attribute cards cardsc filtersc) (sort-by first filterable)))
     (loop-tpl :size 20 :bindings [card cardsc]
      (div :on-click (move-card card cards dest)
       (text "~{card}"))))))

(html
 (head)
 (body
  (h1 "Mage Wars Deck Builder")
  (div :id "deck"
   (h3 "Your Deck")
   (filterable-card-set d/deck d/attributes d/base-set))
  (div :id "base-set"
   (h3 "Base Set")
   (filterable-card-set d/base-set d/attributes d/deck))))
