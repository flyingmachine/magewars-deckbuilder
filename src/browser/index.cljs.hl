(page "index.html"
  (:require [magewars-deckbuilder.deck :as d]
            [magewars-deckbuilder.filtering :refer [filter-cards map-set-filter filtered-cards]]
            [tailrecursion.castra  :as c :refer [mkremote]]))

(set! cljs.core/*print-fn* #(.log js/console %))

(defn toggle-filter!
  [filters attr val]
  (fn []
    (let [f (if (get-in @filters [attr val]) disj conj)]
      (swap! filters #(merge-with f % {attr val})))))

(defn filter-count
  [all-cards cards filters attr val]
  (cell= (count
          (if (get-in filters [attr val])
            (filter #(= (attr %) val) cards)
            (filter
             #(and (= (attr %) val)
                   ((partial map-set-filter (dissoc filters attr)) %))
             all-cards)))))

(defn filter-val
  [all-cards cards filters attr val]
  (li
   (label
    (input :type "checkbox"
           :on-change (toggle-filter! filters attr val))
    (text "~{val} ~{@(filter-count all-cards cards filters attr val)}"))))
(defn filter-attribute
  [all-cards cards filters [attr vals]]
  (div (h3 (text "~{attr}"))
       (ul (map (partial filter-val all-cards cards filters attr) vals))))

(defn add-card
  [dest c]
  (let [count {:count 1}]
    (if-let [found (some #(and (= (:name %) (:name c)) %) dest)]
      (conj (disj dest found) (merge-with + found count))
      (conj dest (merge c count)))))
(defn remove-card
  [src c]
  (into (disj src c)
        (if (> (:count c) 1)
          [(merge-with - c {:count 1})])))

(defn move-card
  [card src dest]
  (fn []
    (let [c @card]
      (swap! src remove-card c)
      (swap! dest add-card c))))

(defc filters {})
(defc cards #{})
(defc error nil)

(def get-state (mkremote 'magewars-deckbuilder.api.deck/get-state cards error (cell nil)))
(def cardsc (filtered-cards cards filters))

(get-state)

(html
 (head)
 (body
   (h1 "Mage Wars Deck Builder")
   (div :id "deck"
     (h3 "Your Deck")
     (loop-tpl :size 20 :bindings [card cardsc]
        (div
          (text "~{card}"))))))
