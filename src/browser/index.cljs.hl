(page "index.html"
  (:require [magewars-deckbuilder.deck :as d]))

(set! cljs.core/*print-fn* #(.log js/console %))

(defn add-filter
  [cf attr val]
  (merge-with into cf {attr #{val}}))
(defn remove-filter
  [cf attr val]
  (let [vals (disj (get cf attr) val)]
    (if (empty? vals)
      (dissoc cf attr)
      (merge cf {attr vals}))))
(defn toggle-filter!
  [filters attr val]
  (fn []
    (let [f (if (get-in @filters [attr val]) remove-filter add-filter)]
      (swap! filters f attr val))))

(defn map-set-filter
  [filters x]
  (every? #((second %) (get x (first %))) filters))
(defn filter-cards
  [cards filters]
  (if (empty? filters)
    cards
    (filter (partial map-set-filter filters) cards)))

(defn filter-count
  [cards attr val]
  (cell= (count (filter #(= (get % attr) val) cards))))

(defn filter-val
  [cards filters attr val]
  (li
   (label
    (input :type "checkbox"
           :on-change (toggle-filter! filters attr val)
           :checked false)
    (text "~{val} ~{@(filter-count cards attr val)}"))))

(defn filter-attribute
  [cards filters [attr vals]]
  (div (h3 (text "~{attr}"))
       (ul (map (partial filter-val cards filters attr) vals))))

(defn filterable-card-set
  [cards filters]
  (let [filtersc (cell filters)
        cardsc (cell= (filter-cards cards filtersc))]
    (div
     (div :class "filters"
      (map (partial filter-attribute cardsc filtersc) (sort first (seq d/attributes))))
     (loop-tpl :bindings [card cardsc]
      (div (text "~{card}"))))))

(html
 (head)
 (body
  (h1 "Mage Wars Deck Builder")
  (div :id "deck"
   (h3 "Your Deck")
   (filterable-card-set d/deck {}))))
